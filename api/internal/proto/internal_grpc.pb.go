// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalClient interface {
	GetUser(ctx context.Context, in *GetUserInput, opts ...grpc.CallOption) (*User, error)
	GetUserList(ctx context.Context, in *GetUserListInput, opts ...grpc.CallOption) (*GetUserListOutput, error)
	AddUser(ctx context.Context, in *AddUserInput, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserInput, opts ...grpc.CallOption) (*User, error)
	WatchUser(ctx context.Context, in *WatchUserInput, opts ...grpc.CallOption) (Internal_WatchUserClient, error)
}

type internalClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalClient(cc grpc.ClientConnInterface) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) GetUser(ctx context.Context, in *GetUserInput, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/internal.Internal/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetUserList(ctx context.Context, in *GetUserListInput, opts ...grpc.CallOption) (*GetUserListOutput, error) {
	out := new(GetUserListOutput)
	err := c.cc.Invoke(ctx, "/internal.Internal/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) AddUser(ctx context.Context, in *AddUserInput, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/internal.Internal/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) UpdateUser(ctx context.Context, in *UpdateUserInput, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/internal.Internal/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) WatchUser(ctx context.Context, in *WatchUserInput, opts ...grpc.CallOption) (Internal_WatchUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &Internal_ServiceDesc.Streams[0], "/internal.Internal/WatchUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalWatchUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Internal_WatchUserClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type internalWatchUserClient struct {
	grpc.ClientStream
}

func (x *internalWatchUserClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InternalServer is the server API for Internal service.
// All implementations must embed UnimplementedInternalServer
// for forward compatibility
type InternalServer interface {
	GetUser(context.Context, *GetUserInput) (*User, error)
	GetUserList(context.Context, *GetUserListInput) (*GetUserListOutput, error)
	AddUser(context.Context, *AddUserInput) (*User, error)
	UpdateUser(context.Context, *UpdateUserInput) (*User, error)
	WatchUser(*WatchUserInput, Internal_WatchUserServer) error
	mustEmbedUnimplementedInternalServer()
}

// UnimplementedInternalServer must be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (UnimplementedInternalServer) GetUser(context.Context, *GetUserInput) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedInternalServer) GetUserList(context.Context, *GetUserListInput) (*GetUserListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedInternalServer) AddUser(context.Context, *AddUserInput) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedInternalServer) UpdateUser(context.Context, *UpdateUserInput) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedInternalServer) WatchUser(*WatchUserInput, Internal_WatchUserServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUser not implemented")
}
func (UnimplementedInternalServer) mustEmbedUnimplementedInternalServer() {}

// UnsafeInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServer will
// result in compilation errors.
type UnsafeInternalServer interface {
	mustEmbedUnimplementedInternalServer()
}

func RegisterInternalServer(s grpc.ServiceRegistrar, srv InternalServer) {
	s.RegisterService(&Internal_ServiceDesc, srv)
}

func _Internal_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetUser(ctx, req.(*GetUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetUserList(ctx, req.(*GetUserListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).AddUser(ctx, req.(*AddUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).UpdateUser(ctx, req.(*UpdateUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_WatchUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUserInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalServer).WatchUser(m, &internalWatchUserServer{stream})
}

type Internal_WatchUserServer interface {
	Send(*User) error
	grpc.ServerStream
}

type internalWatchUserServer struct {
	grpc.ServerStream
}

func (x *internalWatchUserServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// Internal_ServiceDesc is the grpc.ServiceDesc for Internal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Internal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Internal_GetUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _Internal_GetUserList_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Internal_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Internal_UpdateUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchUser",
			Handler:       _Internal_WatchUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/internal.proto",
}
